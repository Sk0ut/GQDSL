/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. GQDSLGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;
  LOOKAHEAD = 1;}PARSER_BEGIN(GqdslParser)
import java.io.FileInputStream;

public class GqdslParser/*@bgen(jjtree)*/implements GqdslParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTGqdslParserState jjtree = new JJTGqdslParserState();

/*@egen*/  public static void main(String args [])  {
    String fileName = "Testes";
    try    {	  new GqdslParser(new FileInputStream(fileName));		
	} catch (Exception e)	{
	  e.printStackTrace();
	  return;	}
    try    {      SimpleNode n = GqdslParser.Start();      n.dump("");      System.out.println("File \"" + fileName + "\" is according to grammar.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(GqdslParser)

< DEFAULT > TOKEN:{
	< QUERY_START :  "QUERY" >: QUERY
	//| < JAVA_LINE : (~["\n","\r"])*(["\n","\r"])+ >}

< DEFAULT, QUERY, IN_BRACES > SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}

< QUERY > MORE:{
  "\"" : STRING_BODY}

< STRING_BODY > TOKEN:
{
  < CONSTANT_VALUE : (~["\r","\n"])* "\""> : QUERY}

< QUERY > TOKEN :{
	< OPEN1 : "(" > : IN_BRACES
	| < OPEN2 : "{" >
	| < CLOSE2 : "}" > : DEFAULT

	| < SELECT : "SELECT" >
	| < WHERE : "WHERE" >
	| < COUNT : "COUNT" >
	| < FILTER : "FILTER" >
	| < DISTINCT : "DISTINCT" >
	| < EDGE : "e" < COLON > >
	| < PROPERTY : "p" < COLON > >
	| < PROPERTY_VALUE : "v" < COLON > >
	| < QUESTION_MARK : "?" >
	| < ALL : "*" >
	| < COLON : ":" >
	| < DOT: "." >
	| < IDENTIFIER : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","0"-"9","_"])* >
	| < QUERY_VAR : < QUESTION_MARK > < IDENTIFIER > >
}
< IN_BRACES > TOKEN:{
  	< JAVA_VAR : ["a"-"z","A"-"Z","$","_"](["a"-"z","A"-"Z","0"-"9","$","_"])* >
	| < CLOSE1 : ")" > : QUERY }

< QUERY, IN_BRACES > TOKEN:{
  < COMMA: "," >}

< * > TOKEN:
{	< UNKNOWN: ~[] >
}
 
SimpleNode Start() :{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/ // JavaCode()
  (    Query()
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
 // JavaCode()    {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
/*
SimpleNode JavaCode() :
{Token t;}
{
  	{		jjtThis.value = "";
  	}	(		t = < JAVA_LINE >
	  	{
	    	jjtThis.value += t.image;	  	}
	)+
	{		return jjtThis;
	}
}
*/
SimpleNode Query() :{/*@bgen(jjtree) Query */
  SimpleNode jjtn000 = new SimpleNode(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Query */
  try {
/*@egen*/
  QueryHeader()
  QueryExpr()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {	return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void QueryHeader()       :
{}
{
  < QUERY_START ><OPEN1 > Graph() < COMMA > Return() < CLOSE1 >  < COLON >}

SimpleNode Graph():
{/*@bgen(jjtree) Graph */
 SimpleNode jjtn000 = new SimpleNode(JJTGRAPH);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Graph */
  try {
/*@egen*/
  t = < JAVA_VAR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {
    jjtn000.value = t.image;
    return jjtn000;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

SimpleNode Return():
{/*@bgen(jjtree) Return */
 SimpleNode jjtn000 = new SimpleNode(JJTRETURN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Return */
        try {
/*@egen*/	t = < JAVA_VAR >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  jjtn000.value = t.image;
	  return jjtn000;	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode QueryExpr():
{/*@bgen(jjtree) QueryExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTQUERYEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) QueryExpr */
  try {
/*@egen*/
  QuerySelect()
  QueryWhere()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {	return jjtn000;		
 }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

SimpleNode QuerySelect():
{/*@bgen(jjtree) QuerySelect */
 SimpleNode jjtn000 = new SimpleNode(JJTQUERYSELECT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) QuerySelect */
  try {
/*@egen*/
  {
    jjtn000.value = "";  }
  < SELECT >
  (
    ((< ALL >    {
      jjtn000.value = "*";    })
  |       (t = < QUERY_VAR >	    {		  jjtn000.value += t.image + " ";
	    }
	  )+
	)
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
SimpleNode QueryWhere():
{/*@bgen(jjtree) QueryWhere */
  SimpleNode jjtn000 = new SimpleNode(JJTQUERYWHERE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) QueryWhere */
  try {
/*@egen*/
  < WHERE ><OPEN2 >  WhereExpr()
  (    < DOT >
    WhereExpr()
  )*
  <CLOSE2 >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

SimpleNode WhereExpr():
{/*@bgen(jjtree) WhereExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTWHEREEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhereExpr */
        try {
/*@egen*/
	RelationSubject()
	Relation()
	RelationValue()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  return jjtn000;	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}

SimpleNode RelationSubject():
{/*@bgen(jjtree) RelationSubject */
 SimpleNode jjtn000 = new SimpleNode(JJTRELATIONSUBJECT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) RelationSubject */
  try {
/*@egen*/
  t= < QUERY_VAR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.value = t.image;
    return jjtn000;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

SimpleNode Relation():
{/*@bgen(jjtree) Relation */
 SimpleNode jjtn000 = new SimpleNode(JJTRELATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Relation */
        try {
/*@egen*/
	(t1=< EDGE > | t1=< PROPERTY > | t1=< PROPERTY_VALUE >)
	t2=< IDENTIFIER >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  jjtn000.value = t1.image + t2.image; 
	  return jjtn000;	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
SimpleNode RelationValue():
{/*@bgen(jjtree) RelationValue */
 SimpleNode jjtn000 = new SimpleNode(JJTRELATIONVALUE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) RelationValue */
  try {
/*@egen*/
  (    t = < QUERY_VAR > |
    t = < CONSTANT_VALUE >
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.value = t.image;
    return jjtn000;  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}