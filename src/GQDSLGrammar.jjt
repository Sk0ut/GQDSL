/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;
  LOOKAHEAD = 1;}PARSER_BEGIN(GqdslParser)
import java.io.FileInputStream;

public class GqdslParser{  public static void main(String args [])  {
    String fileName = "Testes";
    try    {	  new GqdslParser(new FileInputStream(fileName));		
	} catch (Exception e)	{
	  e.printStackTrace();
	  return;	}
    try    {      SimpleNode n = GqdslParser.Start();      n.dump("");      System.out.println("File \"" + fileName + "\" is according to grammar.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(GqdslParser)

< DEFAULT > TOKEN:{
	< QUERY_START :  "QUERY" >: QUERY
	//| < JAVA_LINE : (~["\n","\r"])*(["\n","\r"])+ >}

< DEFAULT, QUERY, IN_BRACES > SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}

< QUERY > MORE:{
  "\"" : STRING_BODY}

< STRING_BODY > TOKEN:
{
  < CONSTANT_VALUE : (~["\r","\n"])* "\""> : QUERY}

< QUERY > TOKEN :{
	< OPEN1 : "(" > : IN_BRACES
	| < OPEN2 : "{" >
	| < CLOSE2 : "}" > : DEFAULT

	| < SELECT : "SELECT" >
	| < WHERE : "WHERE" >
	| < COUNT : "COUNT" >
	| < FILTER : "FILTER" >
	| < DISTINCT : "DISTINCT" >
	| < EDGE : "e" < COLON > >
	| < PROPERTY : "p" < COLON > >
	| < PROPERTY_VALUE : "v" < COLON > >
	| < QUESTION_MARK : "?" >
	| < ALL : "*" >
	| < COLON : ":" >
	| < DOT: "." >
	| < IDENTIFIER : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","0"-"9","_"])* >
	| < QUERY_VAR : < QUESTION_MARK > < IDENTIFIER > >
}
< IN_BRACES > TOKEN:{
  	< JAVA_VAR : ["a"-"z","A"-"Z","$","_"](["a"-"z","A"-"Z","0"-"9","$","_"])* >
	| < CLOSE1 : ")" > : QUERY }

< QUERY, IN_BRACES > TOKEN:{
  < COMMA: "," >}

< * > TOKEN:
{	< UNKNOWN: ~[] >
}
 
SimpleNode Start() :{}{ // JavaCode()
  (    Query()
  )*
 // JavaCode()    {    return jjtThis;  }}
/*
SimpleNode JavaCode() :
{Token t;}
{
  	{		jjtThis.value = "";
  	}	(		t = < JAVA_LINE >
	  	{
	    	jjtThis.value += t.image;	  	}
	)+
	{		return jjtThis;
	}
}
*/
SimpleNode Query() :{}
{
  QueryHeader()
  QueryExpr()
  {	return jjtThis;
  }}

void QueryHeader() #void :
{}
{
  < QUERY_START ><OPEN1 > Graph() < COMMA > Return() < CLOSE1 >  < COLON >}

SimpleNode Graph():
{Token t;}
{
  t = < JAVA_VAR >  {
    jjtThis.value = t.image;
    return jjtThis;  }}

SimpleNode Return():
{Token t;}
{	t = < JAVA_VAR >
	{
	  jjtThis.value = t.image;
	  return jjtThis;	}
}

SimpleNode QueryExpr():
{}{
  QuerySelect()
  QueryWhere()
  {	return jjtThis;		
 }}

SimpleNode QuerySelect():
{Token t;}
{
  {
    jjtThis.value = "";  }
  < SELECT >
  (
    ((< ALL >    {
      jjtThis.value = "*";    })
  |       (t = < QUERY_VAR >	    {		  jjtThis.value += t.image + " ";
	    }
	  )+
	)
  )
  {
    return jjtThis;  }}
SimpleNode QueryWhere():
{}
{
  < WHERE ><OPEN2 >  WhereExpr()
  (    < DOT >
    WhereExpr()
  )*
  <CLOSE2 >
  {
    return jjtThis;  }}

SimpleNode WhereExpr():
{}
{
	RelationSubject()
	Relation()
	RelationValue()
	{
	  return jjtThis;	}}

SimpleNode RelationSubject():
{Token t;}
{
  t= < QUERY_VAR >
  {
    jjtThis.value = t.image;
    return jjtThis;  }}

SimpleNode Relation():
{Token t1, t2;}
{
	(t1=< EDGE > | t1=< PROPERTY > | t1=< PROPERTY_VALUE >)
	t2=< IDENTIFIER >
	{
	  jjtThis.value = t1.image + t2.image; 
	  return jjtThis;	}
}
SimpleNode RelationValue():
{Token t;}
{
  (    t = < QUERY_VAR > |
    t = < CONSTANT_VALUE >
  )
  {
    jjtThis.value = t.image;
    return jjtThis;  }}