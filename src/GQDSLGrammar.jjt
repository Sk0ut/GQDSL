/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(GqdslParser)
public class GqdslParser{  public static void main(String args [])  {    System.out.println("Reading from standard input...");    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");    new GqdslParser(System.in);    try    {      SimpleNode n = GqdslParser.Start();      n.dump("");      System.out.println("Thank you.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(GqdslParser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])?     >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >}

TOKEN : /*Start and End Tokens*/
{
	< START : "GQDSL_BEGIN" >
	< END : "GQDSL_END >

	< QUERY : "QUERY" >

	< VAR : [a-zA-Z$_]([a-zA-Z0-9$_])* >
}

TOKEN : /* Open and Closing Tokens */{
	< OPEN1 : "(" >
	< CLOSE1 : ")" >
	< OPEN2 : "{" >
	< CLOSE2 : "}" >

}

TOKEN : /* Query Keywords*/
{
	< SELECT : "SELECT" >
	< WHERE : "WHERE" >
	< COUNT : "COUNT" >
	< FILTER : "FILTER" >
	< DISTINCT : "DISTINCT" >

	< EDGE : "e" >
	< PROPERTY : "p" >
	< PROPERTY_VALUE : "v" >
	< QUESTIONMARK : "?" >
	< ALL : "*" >
	< COLON : ":" >
	< COMMA : "," >
	
}TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}SimpleNode Start() :{}{  BEGIN OPEN1 Graph() CLOSE1
  (    Query()
  )* END  {    return jjtThis;  }}

SimpleNode Graph() :{
  Token t;}
{
	t = < VAR >
	{
    	jjtThis.value =  t.image;
		return jjtThis;
    }
}

SimpleNode QueryVar(){  Token t;
}
{
	t = < VAR >
	{
    	jjtThis.value =  t.image;
		return jjtThis;
  	}
}

SimpleNode Query() :{	Token t;
}
{

  < QUERY > < OPEN1 >
  QueryVar()
  < CLOSE1 > <COLON >
  QueryExpr()
  {	return jjtThis;
  }
}

SimpleNode QueryExpr(){
}
{	< SELECT >
	SelectVars()
	< WHERE > <OPEN2 > WhereParams() < CLOSE2 >
	{
	  return jjtThis;
	}
	
}

SimpleNode SelectVars(){}
{	(
	  < ALL > 	)
	|
	(	  (
	  QueryVar()	  )+
	)
	{
	  return jjtThis;
	}
}

SimpleNode QueryVar()
{}
{	< QUESTIONMARK >
	< VAR >
	{
	  return jjtThis;
	}
}

SimpleNode WhereParams()
{
}
{

	ParamLine()
	(
	  < COMMA >
	  ParamLine()	)*
	
	{
	  return jjtThis;
	}
}

SimpleNode ParamLine()
{
}
{
	QueryVar()
	Relation()
	RelationValue()
	
	{
	  return jjtThis;
	}

}

SimpleNode Relation()
{
}
{
	(< EDGE > | < PROPERTY > | < PROPERTY_VALUE >)
	< COLON >
	< VAR >

	{
	  return jjtThis;
	}
}

SimpleNode RelationValue()
{
}
{
	QueryVar() | < VAR >

	{
	  return jjtThis;
	}
}