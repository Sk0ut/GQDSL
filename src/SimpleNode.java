import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.regex.Matcher;

import org.apache.jena.query.Query;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.Syntax;
import org.apache.jena.sparql.algebra.Algebra;
import org.apache.jena.sparql.algebra.Op;

/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected GqdslParser parser;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(GqdslParser p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return GqdslParserTreeConstants.jjtNodeName[id] + (value == null ? "" :  ": " + (String) value); }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }
  
  public void compile(Writer writer) throws IOException {
	  switch(id) {
	  	case GqdslParserTreeConstants.JJTJAVACODE:
		  writer.write((String) value);
		  break;
	  	case GqdslParserTreeConstants.JJTQUERY:
	  	  writer.write("<COMPILED QUERY>" + System.lineSeparator());
	  	  writeQuery(this, writer);
		  writer.write("</COMPILED QUERY>" + System.lineSeparator());
		  break;
	  }
	  if (children != null) {
	      for (int i = 0; i < children.length; ++i) {
	        SimpleNode n = (SimpleNode)children[i];
	        if (n != null) {
	        	n.compile(writer);
	        }
	      }
	    }
  }

	private void writeQuery(SimpleNode n, Writer writer) throws IOException {
		SimpleNode graphNode = (SimpleNode) n.children[0];
		String graphLoadingString = 
				"Model model = ModelFactory.createDefaultModel();" + System.lineSeparator() +
				"InputStream in = FileManager.get().open(" + graphNode.value + ");" + System.lineSeparator() +
				"if (in == null) {" + System.lineSeparator() +
				"throw new IllegalArgumentException(\"File: \\\"\" + " + graphNode.value + " + \"\\\" not found\");" + System.lineSeparator() +
				"}" + System.lineSeparator() +
				"model.read(in, null);" + System.lineSeparator();
		
		String prefixes = "PREFIX v: <http://www.tinkerpop.com/traversal/value#>" + System.lineSeparator() +
        				  "PREFIX e: <http://www.tinkerpop.com/traversal/edge#>" + System.lineSeparator() +
        				  "PREFIX p: <http://www.tinkerpop.com/traversal/property#>" + System.lineSeparator();
		
		SimpleNode returnNode = (SimpleNode) n.children[1];
		SimpleNode expression = (SimpleNode) n.children[2];
		
		String queryString = prefixes;
		SimpleNode select = (SimpleNode) expression.children[0];
		queryString += "SELECT " + select.value;
		SimpleNode where = (SimpleNode) expression.children[1];
		queryString += " WHERE {";
		
		for (int i = 0; i < where.children.length; ++i) {
			SimpleNode relationNode = (SimpleNode) where.children[i];
			SimpleNode relationSubject = (SimpleNode) relationNode.children[0];
			SimpleNode relation = (SimpleNode) relationNode.children[1];
			SimpleNode relationValue = (SimpleNode) relationNode.children[2];
			String relationExp = " " + relationSubject.value + " " + relation.value + " " + ((String)relationValue.value).replaceAll("\"", Matcher.quoteReplacement("\\\""))  + " . ";
			
			queryString += relationExp;
		}
		
		queryString += "}";
		
		String queryCreationString = 
				"String queryString = \"" + queryString + "\"" + System.lineSeparator() +
				"Query query = QueryFactory.create(queryString, Syntax.syntaxSPARQL) ;" + System.lineSeparator() +
				"Op op = Algebra.compile(query) ;" + System.lineSeparator() +
				"op = Algebra.optimize(op) ;" + System.lineSeparator();
	  	
	  	writer.write("{" + System.lineSeparator());
	  	writer.write(graphLoadingString);
	  	writer.write(queryCreationString);
	  	writer.write("}" + System.lineSeparator());
	}
}

/* JavaCC - OriginalChecksum=2e0a4473f94abef3797866894a604ed0 (do not edit this line) */
