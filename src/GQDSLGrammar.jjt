/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(GqdslParser)
public class GqdslParser{  public static void main(String args [])  {    System.out.println("Reading from standard input...");    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");    new GqdslParser(System.in);    try    {      SimpleNode n = GqdslParser.Start();      n.dump("");      System.out.println("Thank you.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(GqdslParser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])?     >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >}


TOKEN : /* Open and Closing Tokens */{
	< OPEN1 : "(" >
	| < CLOSE1 : ")" >
	| < OPEN2 : "{" >
	| < CLOSE2 : "}" >

}

TOKEN : /* Query Keywords*/
{
	< SELECT : "SELECT" >
	| < WHERE : "WHERE" >
	| < COUNT : "COUNT" >
	| < FILTER : "FILTER" >
	| < DISTINCT : "DISTINCT" >
	| < EDGE : "e" < COLON > >
	| < PROPERTY : "p" < COLON > >
	| < PROPERTY_VALUE : "v" < COLON > >
	| < QUESTIONMARK : "?" >
	| < ALL : "*" >
	| < COLON : ":" >
	| < COMMA : "," >

	| < START : "GQDSL_BEGIN" >
	|  < END : "GQDSL_END" >

	| < QUERY : "QUERY" >

	| < VAR : ["a"-"z","A"-"Z","$","_"](["a"-"z","A"-"Z","0"-"9","$","_"])* >
	| < QUERY_VAR : "?" < VAR > > 	
}
< INBRACES > TOKEN:{
  < JAVA_VAR : ["a"-"z","A"-"Z","$","_"](["a"-"z","A"-"Z","0"-"9","$","_"])* >}

< * > TOKEN:
{	< UNKNOWN: ~[] >
}  
SimpleNode Start() :{}{  < START > <OPEN1 > Graph() < CLOSE1 >
  (    Query()
  )* < END >  {    return jjtThis;  }}

SimpleNode Graph() :{
  Token t;}
{
	t = < VAR >
	{
    	jjtThis.value =  t.image;
		return jjtThis;
    }
}

SimpleNode QueryReturn() :{  Token t;
}
{
	t = < VAR >
	{
    	jjtThis.value =  t.image;
		return jjtThis;
  	}
}

SimpleNode Query() :{	Token t;
}
{

  < QUERY > < OPEN1 >
  QueryReturn()
  < CLOSE1 > <COLON >
  QueryExpr()
  {	return jjtThis;
  }
}

void QueryExpr() #void :{}
{	< SELECT >
	SelectVars()
	< WHERE > <OPEN2 > WhereParams() < CLOSE2 >
}

SimpleNode SelectVars() :{
  Token t;}
{
  {
    jjtThis.value = "";  }	(	  (
	  < ALL > 		)		{
		  jjtThis.value = "ALL";		}
	|
	(	  (
	  t = < QUERY_VAR >	  {
	    jjtThis.value += t.image + " ";	  }	  )+
	))
	{
	  return jjtThis;
	}
}


SimpleNode WhereParams() :
{
}
{

	ParamLine()
	(
	  < COMMA >
	  ParamLine()	)*
	
	{
	  return jjtThis;
	}
}

SimpleNode ParamLine() :
{
}
{
	< QUERY_VAR >
	Relation()
	RelationValue()
	
	{
	  return jjtThis;
	}

}

SimpleNode Relation() :
{
}
{
	(< EDGE > | < PROPERTY > | < PROPERTY_VALUE >)
	< VAR >

	{
	  return jjtThis;
	}
}

SimpleNode RelationValue() :
{
  Token t;
}
{
	(	  t = < QUERY_VAR > | t = < VAR >
	)
	{
	  jjtThis.value = t.image;
	  return jjtThis;
	}
}