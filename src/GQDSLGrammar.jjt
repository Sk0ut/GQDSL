/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
  LOOKAHEAD = 1;
}

PARSER_BEGIN(GqdslParser)

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.Writer;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.Objects;

public class GqdslParser
{
	private static List<Map<String, String>> symbolTables = new LinkedList<Map<String, String>>();
    private static Map<String, String> lastQueryTable;
    private static String lastRelation;
  
  public static void main(String args [])
  {
     if(args.length != 1){
        System.out.println("USAGE: " + GqdslParser.class.getName() + " <fileName>");
        return;
     }

     String fileName = args[0];

     if(!fileName.substring(fileName.lastIndexOf('.'), fileName.length()).equals(".jgq")){
         System.out.println("The file provided must have the .jgq extension");
         return;
     }

    try
    {
	  new GqdslParser(new FileInputStream(fileName));
		
	} catch (Exception e)
	{
	  e.printStackTrace();
	  return;
	}
    try
    {
      SimpleNode n = GqdslParser.Start();
      n.dump("");
      System.out.println("File \"" + fileName + "\" is according to grammar.");
      Writer writer = new PrintWriter(new FileOutputStream(fileName + fileName.substring(0, fileName.lastIndexOf('.')) + ".java"));
      n.compile(writer);
      writer.close();
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(GqdslParser)

< DEFAULT > TOKEN:
{
	< QUERY_START :  "QUERY" >: QUERY
  | 	< JAVA_CODE : ~[] >
}

< QUERY, IN_BRACES > SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

< QUERY > MORE:
{
  "\"" : STRING_BODY
}

< STRING_BODY > TOKEN:
{
  < CONSTANT_VALUE : (~["\r","\n"])* "\""> : QUERY
}

< QUERY > TOKEN :
{
	< OPEN1 : "(" > : IN_BRACES
	| < OPEN2 : "{" >
	| < CLOSE2 : "}" > : DEFAULT

	| < SELECT : "SELECT" >
	| < WHERE : "WHERE" >
	| < COUNT : "COUNT" >
	| < FILTER : "FILTER" >
	| < DISTINCT : "DISTINCT" >
	| < EDGE : "e" < COLON > >
	| < PROPERTY : "p" < COLON > >
	| < PROPERTY_VALUE : "v" < COLON > >
	| < QUESTION_MARK : "?" >
	| < ALL : "*" >
	| < COLON : ":" >
	| < DOT: "." >
	| < IDENTIFIER : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","0"-"9","_"])* >
	| < QUERY_VAR : < QUESTION_MARK > < IDENTIFIER > >
}

< IN_BRACES > TOKEN:
{
  	< JAVA_VAR : ["a"-"z","A"-"Z","$","_"](["a"-"z","A"-"Z","0"-"9","$","_"])* >
	| < CLOSE1 : ")" > : QUERY 
}

< QUERY, IN_BRACES > TOKEN:
{
  < COMMA: "," >
}

< * > TOKEN:
{
	< UNKNOWN: ~[] >
}
 

SimpleNode Start() :
{}
{
  JavaCode()
  (
    Query()
    JavaCode()
  )*
  < EOF >
  {
    return jjtThis;
  }
}

SimpleNode JavaCode() :
{Token t;}
{
  	{
		jjtThis.value = "";
  	}
	(
		t = < JAVA_CODE >
	  	{
	    	jjtThis.value += t.image;
	  	}
	)*
	{  
		return jjtThis;
	}
}

SimpleNode Query() :
{}
{
  {
     symbolTables.add(new HashMap<String, String>());
     lastQueryTable = symbolTables.get(symbolTables.size() - 1);
  }
  QueryHeader()
  QueryExpr()
  {
    for (Map.Entry<String, String> entry: lastQueryTable.entrySet()) {
                if (Objects.equals(entry.getValue(), "undefined")) {
                    throw new Error("Variable " + entry.getKey() + " cannot be left undefined at the end of query");
                }
            }
	return jjtThis;
  }
}

void QueryHeader() #void :
{}
{
  < QUERY_START ><OPEN1 > Graph() < COMMA > Return() < CLOSE1 >  < COLON >
}

SimpleNode Graph():
{Token t;}
{
  t = < JAVA_VAR >
  {
    jjtThis.value = t.image;
    return jjtThis;
  }
}

SimpleNode Return():
{Token t;}
{
	t = < JAVA_VAR >
	{
	  jjtThis.value = t.image;
	  return jjtThis;
	}
}

SimpleNode QueryExpr():
{}
{
  QuerySelect()
  QueryWhere()
  {
	return jjtThis;		
 }
}

SimpleNode QuerySelect():
{Token t;}
{
  {
    jjtThis.value = "";
  }
  < SELECT >
  (
    ((< ALL >
    {
      jjtThis.value = "*";
    })
  | 
      (t = < QUERY_VAR >
	    {
		  jjtThis.value += t.image + " ";
		  lastQueryTable.put(t.image, "undefined");
	    }
	  )+
	)
  )
  {
    return jjtThis;
  }
}

SimpleNode QueryWhere():
{}
{
  < WHERE ><OPEN2 >
  WhereExpr()
  (
    < DOT >
    WhereExpr()
  )*
  <CLOSE2 >
  {
    return jjtThis;
  }
}

SimpleNode WhereExpr():
{}
{
	RelationSubject()
	Relation()
	RelationValue()
	{
	  return jjtThis;
	}
}

SimpleNode RelationSubject():
{Token t;}
{
  t= < QUERY_VAR >
  {
    jjtThis.value = t.image;
    String type = lastQueryTable.get(t.image);
            if (Objects.equals(type, "value"))
                throw new Error("Value cannot be used as left hand operand");
            if (type == null)
                lastQueryTable.put(t.image, "vertex");
            else if (Objects.equals(type, "undefined"))
                lastQueryTable.replace(t.image, "vertex");
    return jjtThis;
  }
}

SimpleNode Relation():
{Token t1, t2;}
{
	(
	  t1=< EDGE >
		{
		   lastRelation = "edge";
		}
	  | t1=< PROPERTY >
		{
		   lastRelation = "property";
		}
	  | t1=< PROPERTY_VALUE >
		{
		   lastRelation = "property_value";
		}
	)
	t2=< IDENTIFIER >
	{
	  jjtThis.value = t1.image + t2.image; 
	  return jjtThis;
	}
}

SimpleNode RelationValue():
{Token t;}
{
  (
    t = < QUERY_VAR >
    {
       String type = lastQueryTable.get(t.image);
                    if (Objects.equals(lastRelation, "property_value")) {
                        if (type == null)
                            lastQueryTable.put(t.image, "value");
                        else if (Objects.equals(type, "undefined"))
                            lastQueryTable.replace(t.image, "value");
                        else if (Objects.equals(type, "value"))
                            throw new Error("Value of variable " + t.image + " cannot be redefined");
                        else throw new Error("Variable " + t.image + " has type " + type + " and is being used as value");
                         }
                    else if (Objects.equals(lastRelation, "property")) {
                        if (type == null)
                            lastQueryTable.put(t.image, "property");
                        else if (Objects.equals(type, "undefined"))
                            lastQueryTable.replace(t.image, "property");
                        else if (Objects.equals(type, "property"))
                            throw new Error("Value of variable " + t.image + " cannot be redefined");
                        else throw new Error("Variable " + t.image + " has type " + type + " and is being used as property");
                    }
                    else if (Objects.equals(lastRelation, "edge")) {
                        if (type == null)
                            lastQueryTable.put(t.image, "vertex");
                        else if (Objects.equals(type, "undefined"))
                            lastQueryTable.replace(t.image, "vertex");
                        else if (!Objects.equals(type, "vertex"))
                            throw new Error("Variable " + t.image + " has type " + type + " and is being used as vertex");
                    }
    }
    |
    t = < CONSTANT_VALUE >
    {
       if (!Objects.equals(lastRelation, "property_value"))
                        throw new Error("Constants can only be used as properties of vertices");
    }
  )
  {
    jjtThis.value = t.image;
    return jjtThis;
  }
}