/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. GQDSLGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
  LOOKAHEAD = 1;
}

PARSER_BEGIN(GqdslParser)

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.Writer;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.Objects;

public class GqdslParser/*@bgen(jjtree)*/implements GqdslParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTGqdslParserState jjtree = new JJTGqdslParserState();

/*@egen*/
	private static List<Map<String, String>> symbolTables = new LinkedList<Map<String, String>>();
    private static Map<String, String> lastQueryTable;
    private static String lastRelation;
  
  public static void main(String args [])
  {
     if(!( 1 <= args.length && args.length <= 2)){
        System.out.println("USAGE: " + GqdslParser.class.getName() + " <fileName> [-v]");
        return;
     }

     String fileName = args[0];

     if(!fileName.substring(fileName.lastIndexOf('.'), fileName.length()).equals(".jgq")){
         System.out.println("The file provided must have the .jgq extension");
         return;
     }

	boolean verbose = false;
     if (args.length == 2) {
       if (Objects.equals(args[1], "-v")) {			verbose = true;
       }
       else       { 
        System.out.println("USAGE: " + GqdslParser.class.getName() + " <fileName> [-v]");
         return;       }     }

    try
    {
	  new GqdslParser(new FileInputStream(fileName));
		
	} catch (Exception e)
	{
	  e.printStackTrace();
	  return;
	}
    try
    {
      SimpleNode n = GqdslParser.Start();
	if (verbose)	{
	  n.dump("");	}
      System.out.println("File \"" + fileName + "\" is according to grammar.");
      Writer writer = new PrintWriter(new FileOutputStream(fileName.substring(0, fileName.lastIndexOf('.')) + ".java"));
      n.compile(writer);
      writer.close();
      System.out.println("File \"" + fileName + "\" compiled.");
    }
    catch (Exception e)
    {
      System.out.println("Failed to compile.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(GqdslParser)

< DEFAULT > TOKEN:
{
	< QUERY_START :  "QUERY" >: QUERY
  | 	< JAVA_CODE : ~[] >
}

< QUERY, IN_BRACES > SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

< QUERY > MORE:
{
  "\"" : STRING_BODY
}

< STRING_BODY > TOKEN:
{
  < CONSTANT_VALUE : (~["\r","\n"])* "\""> : QUERY
}

< QUERY > TOKEN :
{
	< OPEN1 : "(" > : IN_BRACES
	| < OPEN2 : "{" >
	| < CLOSE2 : "}" > : DEFAULT

	| < SELECT : "SELECT" >
	| < WHERE : "WHERE" >
	| < COUNT : "COUNT" >
	| < FILTER : "FILTER" >
	| < DISTINCT : "DISTINCT" >
	| < EDGE : "e" < COLON > >
	| < PROPERTY : "p" < COLON > >
	| < PROPERTY_VALUE : "v" < COLON > >
	| < QUESTION_MARK : "?" >
	| < ALL : "*" >
	| < COLON : ":" >
	| < DOT: "." >
	| < IDENTIFIER : ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","0"-"9","_"])* >
	| < QUERY_VAR : < QUESTION_MARK > < IDENTIFIER > >
}

< IN_BRACES > TOKEN:
{
  	< JAVA_VAR : ["a"-"z","A"-"Z","$","_"](["a"-"z","A"-"Z","0"-"9","$","_"])* >
	| < CLOSE1 : ")" > : QUERY 
}

< QUERY, IN_BRACES > TOKEN:
{
  < COMMA: "," >
}

< * > TOKEN:
{
	< UNKNOWN: ~[] >
}
 

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  JavaCode()
  (
    Query()
    JavaCode()
  )*
  < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode JavaCode() :
{/*@bgen(jjtree) JavaCode */
 SimpleNode jjtn000 = new SimpleNode(JJTJAVACODE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) JavaCode */
        try {
/*@egen*/
  	{
		jjtn000.value = "";
  	}
	(
		t = < JAVA_CODE >
	  	{
	    	jjtn000.value += t.image;
	  	}
	)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{  
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode Query() :
{/*@bgen(jjtree) Query */
  SimpleNode jjtn000 = new SimpleNode(JJTQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Query */
  try {
/*@egen*/
  {
     symbolTables.add(new HashMap<String, String>());
     lastQueryTable = symbolTables.get(symbolTables.size() - 1);
  }
  QueryHeader()
  QueryExpr()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    for (Map.Entry<String, String> entry: lastQueryTable.entrySet()) {
                if (Objects.equals(entry.getValue(), "undefined")) {
                    throw new Error("Variable " + entry.getKey() + " cannot be left undefined at the end of query");
                }
            }
	return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void QueryHeader()       :
{}
{
  < QUERY_START ><OPEN1 > Graph() < COMMA > Return() < CLOSE1 >  < COLON >
}

SimpleNode Graph():
{/*@bgen(jjtree) Graph */
 SimpleNode jjtn000 = new SimpleNode(JJTGRAPH);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Graph */
  try {
/*@egen*/
  t = < JAVA_VAR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.value = t.image;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode Return():
{/*@bgen(jjtree) Return */
 SimpleNode jjtn000 = new SimpleNode(JJTRETURN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Return */
        try {
/*@egen*/
	t = < JAVA_VAR >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  jjtn000.value = t.image;
	  return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode QueryExpr():
{/*@bgen(jjtree) QueryExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTQUERYEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) QueryExpr */
  try {
/*@egen*/
  QuerySelect()
  QueryWhere()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	return jjtn000;		
 }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode QuerySelect():
{/*@bgen(jjtree) QuerySelect */
 SimpleNode jjtn000 = new SimpleNode(JJTQUERYSELECT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) QuerySelect */
  try {
/*@egen*/
  {
    jjtn000.value = "";
  }
  < SELECT >
  (
    ((< ALL >
    {
      jjtn000.value = "*";
    })
  | 
      (t = < QUERY_VAR >
	    {
		  jjtn000.value += t.image + " ";
		  lastQueryTable.put(t.image, "undefined");
	    }
	  )+
	)
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode QueryWhere():
{/*@bgen(jjtree) QueryWhere */
  SimpleNode jjtn000 = new SimpleNode(JJTQUERYWHERE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) QueryWhere */
  try {
/*@egen*/
  < WHERE ><OPEN2 >
  WhereExpr()
  (
    < DOT >
    WhereExpr()
  )*
  <CLOSE2 >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode WhereExpr():
{/*@bgen(jjtree) WhereExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTWHEREEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhereExpr */
        try {
/*@egen*/
	RelationSubject()
	Relation()
	RelationValue()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode RelationSubject():
{/*@bgen(jjtree) RelationSubject */
 SimpleNode jjtn000 = new SimpleNode(JJTRELATIONSUBJECT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) RelationSubject */
  try {
/*@egen*/
  t= < QUERY_VAR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.value = t.image;
    String type = lastQueryTable.get(t.image);
            if (Objects.equals(type, "value"))
                throw new Error("Value cannot be used as left hand operand");
            if (type == null)
                lastQueryTable.put(t.image, "vertex");
            else if (Objects.equals(type, "undefined"))
                lastQueryTable.replace(t.image, "vertex");
    return jjtn000;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode Relation():
{/*@bgen(jjtree) Relation */
 SimpleNode jjtn000 = new SimpleNode(JJTRELATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Relation */
        try {
/*@egen*/
	(
	  t1=< EDGE >
		{
		   lastRelation = "edge";
		}
	  | t1=< PROPERTY >
		{
		   lastRelation = "property";
		}
	  | t1=< PROPERTY_VALUE >
		{
		   lastRelation = "property_value";
		}
	)
	t2=< IDENTIFIER >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	  jjtn000.value = t1.image + t2.image; 
	  return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

SimpleNode RelationValue():
{/*@bgen(jjtree) RelationValue */
 SimpleNode jjtn000 = new SimpleNode(JJTRELATIONVALUE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) RelationValue */
  try {
/*@egen*/
  (
    t = < QUERY_VAR >
    {
       String type = lastQueryTable.get(t.image);
                    if (Objects.equals(lastRelation, "property_value")) {
                        if (type == null)
                            lastQueryTable.put(t.image, "value");
                        else if (Objects.equals(type, "undefined"))
                            lastQueryTable.replace(t.image, "value");
                        else if (Objects.equals(type, "value"))
                            throw new Error("Value of variable " + t.image + " cannot be redefined");
                        else throw new Error("Variable " + t.image + " has type " + type + " and is being used as value");
                         }
                    else if (Objects.equals(lastRelation, "property")) {
                        if (type == null)
                            lastQueryTable.put(t.image, "property");
                        else if (Objects.equals(type, "undefined"))
                            lastQueryTable.replace(t.image, "property");
                        else if (Objects.equals(type, "property"))
                            throw new Error("Value of variable " + t.image + " cannot be redefined");
                        else throw new Error("Variable " + t.image + " has type " + type + " and is being used as property");
                    }
                    else if (Objects.equals(lastRelation, "edge")) {
                        if (type == null)
                            lastQueryTable.put(t.image, "vertex");
                        else if (Objects.equals(type, "undefined"))
                            lastQueryTable.replace(t.image, "vertex");
                        else if (!Objects.equals(type, "vertex"))
                            throw new Error("Variable " + t.image + " has type " + type + " and is being used as vertex");
                    }
    }
    |
    t = < CONSTANT_VALUE >
    {
       if (!Objects.equals(lastRelation, "property_value"))
                        throw new Error("Constants can only be used as properties of vertices");
    }
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.value = t.image;
    return jjtn000;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}